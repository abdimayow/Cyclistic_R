bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE
)
plot_ly(
data = total_rides,
x = ~member_casual,
y = ~Percentage,
type = "bar",
text = ~paste(Percentage, "%"),
textposition = "outside",
marker = list(color = c("#1f77b4", "#ff7f0e"))
) %>%
layout(
title = "Percentage of Rides by User Type",
xaxis = list(title = "User Type"),
yaxis = list(title = "Percentage (%)"),
showlegend = FALSE
)
# Average trip duration by user type
avg_duration <- monthly_data[, .(avg_duration = mean(trip_duration, na.rm = TRUE)), by = member_casual]
# Average trip duration table
avg_duration %>%
knitr::kable(
col.names = c("User Type", "Average Duration (minutes)"),
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE
)
# Interactive Plot
plot_ly(avg_duration, x = ~member_casual, y = ~avg_duration, type = 'bar', color = ~member_casual) %>%
layout(title = "Average Trip Duration by User Type",
xaxis = list(title = "User Type"),
yaxis = list(title = "Average Duration (minutes)"))
# Count rides by day of the week and user type
popular_days <- monthly_data[, .N, by = .(member_casual, day_of_week)]
popular_days$day_of_week <- factor(popular_days$day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
setnames(popular_days, "N", "TotalRides")
# Separate tables for each user type
popular_days_member <- popular_days[member_casual == "member"][order(-TotalRides)]
popular_days_casual <- popular_days[member_casual == "casual"][order(-TotalRides)]
# Member Table
member_table <- popular_days_member %>%
knitr::kable(
col.names = c("User Type", "Day of Week", "Total Rides"),
caption = "Popular Days of the Week for Members",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>% # Style User Type column
column_spec(2, width = "20em") %>% # Adjust column width for Day of Week
column_spec(3, color = "black", background = "lightgray") # Style Total Rides column
# Casual Table
casual_table <- popular_days_casual %>%
knitr::kable(
col.names = c("User Type", "Day of Week", "Total Rides"),
caption = "Popular Days of the Week for Casual Riders",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "red") %>% # Style User Type column
column_spec(2, width = "20em") %>% # Adjust column width for Day of Week
column_spec(3, color = "black", background = "lightgray") # Style Total Rides column
# Print tables
member_table
casual_table
# Interactive Plot
plot_ly(popular_days, x = ~day_of_week, y = ~TotalRides, color = ~member_casual, type = 'bar') %>%
layout(title = "Rides by Day of the Week and User Type",
xaxis = list(title = "Day of the Week"),
yaxis = list(title = "Number of Rides"))
# Extract month from started_at
monthly_data[, month := format(started_at, "%B")]
# Count rides by month and user type
popular_months <- monthly_data[, .N, by = .(member_casual, month)]
popular_months$month <- factor(popular_months$month, levels = month.name)
setnames(popular_months, "N", "TotalRides")
# Separate tables for each user type and sort by Total Rides
popular_months_member <- popular_months[member_casual == "member"][order(-TotalRides)]
popular_months_casual <- popular_months[member_casual == "casual"][order(-TotalRides)]
# Member Table
member_month_table <- popular_months_member %>%
knitr::kable(
col.names = c("User Type", "Month", "Total Rides"),
caption = "Popular Months for Members",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>% # Style User Type column
column_spec(2, width = "20em") %>% # Adjust column width for Month
column_spec(3, color = "black", background = "lightgray") # Style Total Rides column
# Casual Table
casual_month_table <- popular_months_casual %>%
knitr::kable(
col.names = c("User Type", "Month", "Total Rides"),
caption = "Popular Months for Casual Riders",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "red") %>% # Style User Type column
column_spec(2, width = "20em") %>% # Adjust column width for Month
column_spec(3, color = "black", background = "lightgray") # Style Total Rides column
# Print tables
member_month_table
casual_month_table
# Interactive Plot
plot_ly(popular_months, x = ~month, y = ~TotalRides, color = ~member_casual, type = 'bar') %>%
layout(title = "Rides by Month and User Type",
xaxis = list(title = "Month"),
yaxis = list(title = "Number of Rides"))
# Step 1: Count rows with missing or blank start_station_name
missing_stations <- monthly_data[is.na(start_station_name) | start_station_name == "", .N]
# Step 2: Filter out rows with missing or blank start_station_name
monthly_data <- monthly_data[!(is.na(start_station_name) | start_station_name == "")]
# Step 3: Count rides by start station, month, and user type
popular_start_stations <- monthly_data[, .N, by = .(start_station_name, month, member_casual)]
setnames(popular_start_stations, "N", "TotalRides") # Rename column for clarity
popular_start_stations <- popular_start_stations[order(-TotalRides)] # Order by Total Rides descending
# Step 4: Filter top start stations for each month and user type
top_start_stations <- popular_start_stations[, .SD[which.max(TotalRides)], by = .(month, member_casual)]
# Step 5: Adjust text placement for visibility in visualizations
top_start_stations[, text_position := ifelse(TotalRides < 50, "inside", "outside")]
# Remove the `text_position` column from the data
top_start_stations2 <- top_start_stations[, .(start_station_name, month, member_casual, TotalRides)]
# Separate tables for each user type
top_start_stations_member <- top_start_stations2[member_casual == "member"][order(-TotalRides)]
top_start_stations_casual <- top_start_stations2[member_casual == "casual"][order(-TotalRides)]
# Member Table
member_table <- top_start_stations_member %>%
knitr::kable(
col.names = c("Start Station", "Month", "User Type", "Total Rides"),
caption = "Top Start Stations for Members",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>% # Style Start Station column
column_spec(3, width = "10em") %>% # Adjust User Type column width
column_spec(4, color = "black", background = "lightgray") # Style Total Rides column
# Casual Table
casual_table <- top_start_stations_casual %>%
knitr::kable(
col.names = c("Start Station", "Month", "User Type", "Total Rides"),
caption = "Top Start Stations for Casual Riders",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "red") %>% # Style Start Station column
column_spec(3, width = "10em") %>% # Adjust User Type column width
column_spec(4, color = "black", background = "lightgray") # Style Total Rides column
# Print tables
member_table
casual_table
# Interactive Plot with Station Name Annotations
plot_ly(top_start_stations,
x = ~month,
y = ~TotalRides,
color = ~member_casual,
type = 'bar',
text = ~paste("Station: ", start_station_name),
textposition = ~text_position,
hoverinfo = "text+y") %>%
layout(title = "Top Start Stations by Month and User Type",
xaxis = list(title = "Month", categoryorder = "array", categoryarray = month.name),
yaxis = list(title = "Number of Rides"),
barmode = "group",
showlegend = TRUE)
# Count rows with missing or blank end_station_name
missing_stations <- monthly_data[is.na(end_station_name) | end_station_name == "", .N]
# Filter out rows with missing or blank end_station_name
monthly_data <- monthly_data[!(is.na(end_station_name) | end_station_name == "")]
# Count rides by end station, month, and user type
popular_end_stations <- monthly_data[, .N, by = .(end_station_name, month, member_casual)]
setnames(popular_end_stations, "N", "TotalRides") # Rename column for clarity
popular_end_stations <- popular_end_stations[order(-TotalRides)] # Order by Total Rides descending
# Filter top end stations for each month and user type
top_end_stations <- popular_end_stations[, .SD[which.max(TotalRides)], by = .(month, member_casual)]
# Adjust text placement to ensure visibility
top_end_stations[, text_position := ifelse(TotalRides < 50, "inside", "outside")]
# Remove the `text_position` column from the data
top_end_stations2 <- top_end_stations[, .(end_station_name, month, member_casual, TotalRides)]
# Separate tables for each user type
top_end_stations_member <- top_end_stations2[member_casual == "member"][order(-TotalRides)]
top_end_stations_casual <- top_end_stations2[member_casual == "casual"][order(-TotalRides)]
# Member Table
member_end_station_table <- top_end_stations_member %>%
knitr::kable(
col.names = c("End Station", "Month", "User Type", "Total Rides"),
caption = "Top End Stations for Members",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "steelblue") %>% # Style End Station column
column_spec(3, width = "10em") %>% # Adjust User Type column width
column_spec(4, color = "black", background = "lightgray") # Style Total Rides column
# Casual Table
casual_end_station_table <- top_end_stations_casual %>%
knitr::kable(
col.names = c("End Station", "Month", "User Type", "Total Rides"),
caption = "Top End Stations for Casual Riders",
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "red") %>% # Style End Station column
column_spec(3, width = "10em") %>% # Adjust User Type column width
column_spec(4, color = "black", background = "lightgray") # Style Total Rides column
# Print tables
member_end_station_table
casual_end_station_table
# Interactive Plot with Station Name Annotations
plot_ly(top_end_stations,
x = ~month,
y = ~TotalRides,
color = ~member_casual,
type = 'bar',
text = ~paste("Station: ", end_station_name),
textposition = ~text_position,
hoverinfo = "text+y") %>%
layout(title = "Top End Stations by Month and User Type",
xaxis = list(title = "Month", categoryorder = "array", categoryarray = month.name),
yaxis = list(title = "Number of Rides"),
barmode = "group",
showlegend = TRUE)
# Aggregate data for peak hours and days
heatmap_data <- monthly_data[, .(Total_Rides = .N), by = .(hour_of_day, day_of_week, member_casual)]
heatmap_data[, day_of_week := factor(day_of_week, levels = c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))]
# Create heatmap for member riders
member_heatmap <- heatmap_data[member_casual == "member"]
member_plot <- plot_ly(
data = member_heatmap,
x = ~hour_of_day,
y = ~day_of_week,
z = ~Total_Rides,
type = "heatmap",
colorscale = list(c(0, "lightblue"), c(1, "darkblue")),
hoverinfo = "x+y+z",
showscale = TRUE
) %>%
layout(
xaxis = list(title = "Hour of Day"),
yaxis = list(title = "Day of Week"),
colorbar = list(title = "Total Rides")
)
# Create heatmap for casual riders
casual_heatmap <- heatmap_data[member_casual == "casual"]
casual_plot <- plot_ly(
data = casual_heatmap,
x = ~hour_of_day,
y = ~day_of_week,
z = ~Total_Rides,
type = "heatmap",
colorscale = list(c(0, "lightpink"), c(1, "red")),
hoverinfo = "x+y+z",
showscale = TRUE
) %>%
layout(
xaxis = list(title = "Hour of Day"),
yaxis = list(title = "Day of Week"),
colorbar = list(title = "Total Rides")
)
# Combine the plots with labels
subplot(member_plot, casual_plot, nrows = 2, shareX = TRUE, titleX = TRUE, titleY = TRUE) %>%
layout(
title = "Peak Hours by User Type",
annotations = list(
list(
x = 0.5,
y = 1,
text = "Member Riders",
showarrow = FALSE,
xref = "paper",
yref = "paper",
font = list(size = 14, color = "yellow")
),
list(
x = 0.5,
y = 0.5,
text = "Casual Riders",
showarrow = FALSE,
xref = "paper",
yref = "paper",
font = list(size = 14, color = "red")
)
)
)
# Calculate average total rides for each hour across 12 months
peak_hours <- monthly_data[, .(Avg_Total_Rides = mean(.N, na.rm = TRUE)),
by = .(hour_of_day, member_casual)]
# Rename column for clarity
setnames(peak_hours, "Avg_Total_Rides", "TotalRides")
# Sort data by Total Rides in descending order
peak_hours <- peak_hours[order(-TotalRides)]
# Aggregate data for peak hours
hourly_data <- monthly_data[, .N, by = .(hour_of_day, member_casual)]
# Create a bar graph with plot_ly
plot_ly(
data = hourly_data,
x = ~hour_of_day,
y = ~N,
color = ~member_casual,
type = "bar",
hoverinfo = "x+y+name",
barmode = "group"
) %>%
layout(
title = "Peak Hours by User Type",
xaxis = list(title = "Hour of Day", tickmode = "array", tickvals = 0:23),
yaxis = list(title = "Number of Rides"),
legend = list(title = list(text = "User Type")),
margin = list(t = 50, b = 50, l = 50, r = 50)
)
# Step 1: Add filters for casual riders, 5 AM to 8 AM, Monday to Friday
filtered_data_am <- monthly_data[
member_casual == "casual" &
hour(started_at) >= 5 & hour(started_at) < 8 & # Between 5 AM and 8 AM
weekdays(started_at) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") # Weekdays only
]
# Step 2: Add filters for casual riders, 3 PM to 6 PM, Monday to Friday
filtered_data_pm <- monthly_data[
member_casual == "casual" &
hour(started_at) >= 15 & hour(started_at) < 18 & # Between 5 PM and 6 PM
weekdays(started_at) %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday") # Weekdays only
]
casual_all <- monthly_data[
member_casual == "casual"
]
# Step 3: Count rides by start station for 5 AM to 8 AM
casual_riders_start_stations_am <- filtered_data_am[, .N, by = .(start_station_name)]
setnames(casual_riders_start_stations_am, "N", "TotalRides")
# Step 4: Count rides by start station for 3 PM to 6 PM
casual_riders_start_stations_pm <- filtered_data_pm[, .N, by = .(start_station_name)]
setnames(casual_riders_start_stations_pm, "N", "TotalRides")
# Step 5: Order by Total Rides in descending order for both time periods
casual_riders_start_stations_am <- casual_riders_start_stations_am[order(-TotalRides)]
casual_riders_start_stations_pm <- casual_riders_start_stations_pm[order(-TotalRides)]
# Filter the top 10 rows for both time periods
top_10_casual_riders_start_stations_am <- casual_riders_start_stations_am[1:10]
top_10_casual_riders_start_stations_pm <- casual_riders_start_stations_pm[1:10]
# Step 6: Display the tables using kableExtra
# Table for 5 AM to 8 AM
top_10_casual_riders_start_stations_am_table <- top_10_casual_riders_start_stations_am %>%
knitr::kable(
col.names = c("Start Station", "Total Rides"), # Table column names
caption = "Top 10 Start Stations for Casual Riders (5 AM to 8 AM, Mon-Fri)", # Table caption
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "red") %>% # Style Start Station column
column_spec(2, color = "black", background = "lightgray") # Style Total Rides column
# Table for 3 PM to 6 PM
top_10_casual_riders_start_stations_pm_table <- top_10_casual_riders_start_stations_pm %>%
knitr::kable(
col.names = c("Start Station", "Total Rides"), # Table column names
caption = "Top 10 Start Stations for Casual Riders (3 PM to 6 PM, Mon-Fri)", # Table caption
format = "html"
) %>%
kable_styling(
bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE,
font_size = 14
) %>%
column_spec(1, bold = TRUE, color = "white", background = "blue") %>% # Style Start Station column
column_spec(2, color = "black", background = "lightgray") # Style Total Rides column
#Print percentage of the group
cat("This group represents  ",((nrow(filtered_data_am) + nrow(filtered_data_am)) / nrow(total_rows)) * 100, "% of casual riders \n")
# Print the tables
top_10_casual_riders_start_stations_am_table
top_10_casual_riders_start_stations_pm_table
#Print percentage of the group
cat("This group represents  ",((nrow(filtered_data_am) + nrow(filtered_data_pm)) / nrow(casual_all)) * 100, "% of casual riders \n")
#Print percentage of the group
cat("This group represents",((nrow(filtered_data_am) + nrow(filtered_data_pm)) / nrow(casual_all)) * 100, "% of casual riders \n")
# Print the tables
top_10_casual_riders_start_stations_am_table
top_10_casual_riders_start_stations_pm_table
# Count rides by start station, month, and user type, including latitude and longitude
popular_start_stations <- monthly_data[, .(
total_rides = .N,
start_lat = mean(start_lat, na.rm = TRUE),
start_lng = mean(start_lng, na.rm = TRUE)
), by = .(start_station_name, month, member_casual)]
# Filter to top stations for each month and user type
top_stations <- popular_start_stations[, .SD[which.max(total_rides)], by = .(month, member_casual)]
# Create leaflet map
leaflet(data = top_stations) %>%
addTiles() %>% # Add base map tiles
addCircleMarkers(
lat = ~start_lat,
lng = ~start_lng,
radius = ~sqrt(total_rides) / 2, # Scale marker size by number of rides
color = ~ifelse(member_casual == "member", "blue", "red"), # Color by user type
group = ~member_casual, # Group for filtering
label = ~paste(
"Station Name: ", start_station_name, " ",
"Month: ", month, " ",
"Total Rides: ", total_rides
), # Hover information
labelOptions = labelOptions(
style = list(
"font-weight" = "bold",
"font-size" = "12px"
),
textsize = "15px",
direction = "auto"
),
popup = ~paste0(
"<b>Station Name:</b> ", start_station_name, "<br>",
"<b>Total Rides:</b> ", total_rides, "<br>",
"<b>Month:</b> ", month, "<br>",
"<b>User Type:</b> ", member_casual
) # Clickable information
) %>%
addLayersControl(
overlayGroups = c("member", "casual"), # Enable filtering by user type
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
position = "bottomright",
colors = c("blue", "red"),
labels = c("Member Riders", "Casual Riders"),
title = "User Type"
)
# Count rides by end station, month, and user type, including latitude and longitude
popular_end_stations <- monthly_data[, .(
total_rides = .N,
end_lat = mean(end_lat, na.rm = TRUE),
end_lng = mean(end_lng, na.rm = TRUE)
), by = .(end_station_name, month, member_casual)]
# Filter to top end stations for each month and user type
top_end_stations <- popular_end_stations[, .SD[which.max(total_rides)], by = .(month, member_casual)]
# Create leaflet map
leaflet(data = top_end_stations) %>%
addTiles() %>% # Add base map tiles
addCircleMarkers(
lat = ~end_lat,
lng = ~end_lng,
radius = ~sqrt(total_rides) / 2, # Scale marker size by number of rides
color = ~ifelse(member_casual == "member", "blue", "red"), # Color by user type
group = ~member_casual, # Group for filtering
label = ~paste(
"Station Name: ", end_station_name, ",",
"Month: ", month, " ",
"Total Rides: ", total_rides
), # Hover information
labelOptions = labelOptions(
style = list(
"font-weight" = "bold",
"font-size" = "12px"
),
textsize = "15px",
direction = "auto"
),
popup = ~paste0(
"<b>Station Name:</b> ", end_station_name, "<br>",
"<b>Total Rides:</b> ", total_rides, "<br>",
"<b>Month:</b> ", month, "<br>",
"<b>User Type:</b> ", member_casual
) # Clickable information
) %>%
addLayersControl(
overlayGroups = c("member", "casual"), # Enable filtering by user type
options = layersControlOptions(collapsed = FALSE)
) %>%
addLegend(
position = "bottomright",
colors = c("blue", "red"),
labels = c("Member Riders", "Casual Riders"),
title = "User Type"
)
# Check if there are positive longitudes
has_positive_longitudes <- any(monthly_data$start_lng > 0) & any(monthly_data$end_lng > 0)
# Print the result
if (has_positive_longitudes) {
print("There are positive longitudes in the data.")
} else {
print("No positive longitudes found in the data.")
}
